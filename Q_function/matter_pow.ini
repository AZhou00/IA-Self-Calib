;Part of the self-calibration IA code. this generates a matter power spectrum in multipole space for a given cosmology

[runtime]
; The test sampler just runs a single parameter set.
sampler = test
root = ${COSMOSIS_SRC_DIR}


[test]
; These are the parameters for this sampler.  In this case there is just one
; parameter.
save_dir=../IA-Self-Calib-Data/run0/cosmoSIS_output/

; If something goes wrong this will aid diagnosis.
fatal_errors=T



; The pipeline section contains information that describes the sequence of
; calculations to be done and what we want out at the end.
[pipeline]
; The list of modules to be run, in this order.  The modules named here must
; appear as sections below.
modules = consistency camb halofit load_nz shear_shear position_shear position_position

; The file to get cosmological and nuisance parameters
; from.
values = matter_pow_values.ini
; Not used here, because we are not sampling
likelihoods = 
extra_output = 
quiet=F
debug=T
timing=F


; The consistency module translates between our chosen parameterization
; and any other that modules in the pipeline may want (e.g. camb).
[consistency]
file = cosmosis-standard-library/utility/consistency/consistency_interface.py


; Camb does background evolution, CMB, and matter power.
[camb]
file = cosmosis-standard-library/boltzmann/camb/camb.so
mode=all
lmax=10000          ;max ell to use for cmb calculation
feedback=2          ;amount of output to print
background_zmax = 0.0 ;the range of values saved for 'distances'
background_zmax = 7.0 ;

accuracy_boost=1.1 ;CAMB accuracy boost parameter
high_acc_default=true ;high accuracy is required w/ Planck data
kmax = 10000.0       ;max k - matter power spectrum
zmin = 0.0         ;min value to save P(k,z)
zmax = 6.0         ;max value to save P(k,z) 
nz = 100            ;number of z values to save P(k,z) 
do_tensors=false   ;include tensor modes
do_lensing=true    ;lensing is required w/ Planck data
high_ell_template=$COSMOSIS_SRC_DIR/cosmosis-standard-library/boltzmann/camb/camb_Jan15/HighLExtrapTemplate_lenspotentialCls.dat
matter_power_lin_version = 3 ; Sum of required P(k,z) outputs:
;                                 1 = CDM + baryons + neutrinos matter power
;                                                                      spectrum
;                                 2 = CDM + baryons matter power spectrum (no
;                                                                    neutrinos)
;                                 3 = Both the above
;                              The default is 1.


; Halofit non-linear power.
;kmin: real, minimum k in Mpc/h to generate values for (default 1e-4)
;kmax: real, maximum k in Mpc/h to generate values for (default 100.0
[halofit]
file = cosmosis-standard-library/boltzmann/halofit/halofit_module.so
kmin = 0.001
kmax = 10000.0
nk = 200
verbose = T

; This is an example of a very simple module - it simple loads in a file once at
; the start when setting up and supplies fixed data when executed.
[load_nz]
file = cosmosis-standard-library/number_density/load_nz_fits/load_nz_fits.py
;nz_file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/likelihood/cfhtlens/cfhtlens_heymans13.fits
nz_file = /hpc/group/cosmology/alanzhou/IA-Project/IA-Self-Calib-Data/run0/n_z/n_true_z.fits
data_sets=SAMPLE


; This module uses the Limber approximation to compute shear-shear C_ell given
; the shear kernel (which is derived from the number density and from geometry).
[shear_shear]
;gives shear_cl 
;https://bitbucket.org/joezuntz/cosmosis/wiki/default_modules/project_2d_1.0
file = cosmosis-standard-library/structure/projection/project_2d.py
ell_min = 100.0
ell_max = 10000.0
n_ell = 220
ell_min_logspaced = 20.0
ell_max_logspaced= 10000.0
n_ell_logspaced = 220
shear-shear = sample-sample
verbose = T

[position_shear]
;gives galaxy_shear_cl
;https://bitbucket.org/joezuntz/cosmosis/wiki/default_modules/project_2d_1.0
file = cosmosis-standard-library/structure/projection/project_2d.py
ell_min = 100.0
ell_max = 10000.0
n_ell = 220
ell_min_logspaced = 20.0
ell_max_logspaced= 10000.0
n_ell_logspaced = 220
position-shear = sample-sample
verbose = T

[position_position]
;gives galaxy_cl
;https://bitbucket.org/joezuntz/cosmosis/wiki/default_modules/project_2d_1.0
file = cosmosis-standard-library/structure/projection/project_2d.py
ell_min = 100.0
ell_max = 10000.0
n_ell = 220
ell_min_logspaced = 20.0
ell_max_logspaced= 10000.0
n_ell_logspaced = 220
position-position = sample-sample
verbose = T

